const MOCK_TASKS = [
  { id: 1, title: "–ò–∑—É—á–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω MVC", isDone: false },
  { id: 2, title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ", isDone: true },
];
// —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞(—Ç–æ –µ—Å—Ç—å –º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è) —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
const model = {
  tasks: MOCK_TASKS,
    addTask(title) {
      const newTask = {
        id: new Date().getTime(), 
        title: title, 
        isDone: false
      }
      this.tasks.push(newTask); 
      view.renderTasks(this.tasks);
    },
    deleteTask(taskId) {
      this.tasks = this.tasks.filter(el => el.id !== taskId)
      view.renderTasks(this.tasks)
    },
    toggleTask(taskId) {
      this.tasks = this.tasks.map((task) => {
        if (task.id === taskId) {
          task.isDone = !task.isDone
        }
        return task
      })
      view.renderTasks(this.tasks)
    }
};

// –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: —Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
const view = {
  init() {
    this.renderTasks(model.tasks);
    const form = document.querySelector('.form');
    const input = document.querySelector('.input');
    const list = document.querySelector('.list');

    //–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Ñ–æ—Ä–º—É
    form.addEventListener('submit', function(event) {
      event.preventDefault() //–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
      const title = input.value
      controller.addTask(title) //–í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ addTask –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞

      input.value = '' //–û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    })

    //–î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –Ω–∞ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å"
    list.addEventListener('click', function (event) {
      if (event.target.classList.contains('task-title')) {
        const taskId = +event.target.parentElement.id
        controller.toggleTask(taskId)
      }
 
      // 1. –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –ø–æ –∫–Ω–æ–ø–∫–µ —É–¥–∞–ª–µ–Ω–∏—è
      if (event.target.classList.contains('delete-button')) {
        const taskId = +event.target.parentElement.id
        // 2. –≤—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        controller.deleteTask(taskId)
      }
    })

  },

  renderTasks(tasks) {
    const list = document.querySelector(".list");

    let tasksHTML = "";

    for (let i = 0; i < tasks.length; i++) {
      const task = tasks[i];

      tasksHTML += `
          <li id="${task.id}" class="${task.isDone ? "done" : ""}">
            <b class="task-title">${task.title}</b>
            <button class="delete-button" type="button">–£–¥–∞–ª–∏—Ç—å üóë</button>
          </li>
        `;
    }

    list.innerHTML = tasksHTML;
  },
};

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏(–∏—Å–ø–æ–ª—å–∑—É—è –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–∏)
const controller = {
  addTask(title) {
    if (title && title.trim() !== '') {
      model.addTask(title)
    }
  },
  deleteTask(taskId) {
    model.deleteTask(taskId)
  },
  toggleTask(taskId){
    model.toggleTask(taskId)
  }
};

function init() {
  view.init();
}

init();
